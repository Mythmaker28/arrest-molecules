name: Check Main Branch Sync

on:
  schedule:
    - cron: '0 12 * * *'  # Tous les jours à midi UTC
  workflow_dispatch:  # Permet déclenchement manuel

permissions:
  issues: write
  contents: read

jobs:
  check-sync:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for all tags
    
    - name: Check if main is behind latest release
      id: check
      run: |
        # Get latest tag
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "none")
        
        # Read VERSION file on main
        MAIN_VERSION=$(cat VERSION 2>/dev/null || echo "unknown")
        
        echo "Latest tag: $LATEST_TAG"
        echo "Main VERSION: $MAIN_VERSION"
        
        if [ "$LATEST_TAG" = "none" ]; then
          echo "No tags found, skipping"
          echo "status=ok" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # Remove 'v' prefix for comparison
        LATEST_TAG_NUM="${LATEST_TAG#v}"
        
        if [ "$LATEST_TAG_NUM" != "$MAIN_VERSION" ]; then
          echo "⚠️ Main is behind! Latest: $LATEST_TAG, Main: v$MAIN_VERSION"
          echo "status=behind" >> $GITHUB_OUTPUT
          echo "latest=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "current=v$MAIN_VERSION" >> $GITHUB_OUTPUT
        else
          echo "✅ Main is synchronized with latest release"
          echo "status=ok" >> $GITHUB_OUTPUT
        fi
    
    - name: Create issue if main is behind
      if: steps.check.outputs.status == 'behind'
      uses: actions/github-script@v7
      with:
        script: |
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: 'sync-warning'
          });
          
          // Ne créer un issue que s'il n'en existe pas déjà un
          if (issues.length === 0) {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '⚠️ Main branch is behind latest release',
              body: `## Synchronization Warning
              
**Latest release:** ${{ steps.check.outputs.latest }}  
**Main branch VERSION:** ${{ steps.check.outputs.current }}

### Actions Required

The main branch needs to be synchronized with the latest release:

\`\`\`bash
git checkout main
git merge --ff-only ${{ steps.check.outputs.latest }}
git push origin main
\`\`\`

Or if you made changes on main after the release:

\`\`\`bash
# Update VERSION file
echo "${{ steps.check.outputs.latest }}" | sed 's/v//' > VERSION
git add VERSION
git commit -m "chore: sync VERSION with latest release"
git push origin main
\`\`\`

This issue will auto-close when main is synchronized.`,
              labels: ['sync-warning', 'automation']
            });
          }

